variables:
  VersionSuffix:

jobs:
- job: Setup
  steps:
    - pwsh: >
          $path = "$(Build.Repository.LocalPath)\version.txt";
          Write-Host "Grabbing version from: $path";

          if(![System.IO.File]::Exists($path)){
            Write-Error "File not found!";
          }

          $version = (Get-Content $path).Trim();
          Write-Host "Version found: $version";

          try
          {
            [System.Management.Automation.SemanticVersion]::Parse($version);
          }
          catch
          {
            Write-Error "'$version' is an invalid SemVer version"
          }

          echo "##vso[task.setvariable variable=BaseVersion;isOutput=true]$version";

          echo "##vso[task.setvariable variable=build.buildnumber]$version";
      failOnStderr: true
      name: buildBaseVersion
      displayName: "Verify and set BaseVersion variable"

- job: Read
  dependsOn: Setup
  variables:
    BaseVersion: $[ dependencies.Setup.outputs['buildBaseVersion.BaseVersion'] ]
    CoalesceVersion: $(BaseVersion)$(VersionSuffix)
  steps:
    - pwsh: Write-Host $(CoalesceVersion)buh